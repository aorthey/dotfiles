"##############################################################################
" Key remappings
"##############################################################################

"##############################################################################
"NERDTree keymaps
"##############################################################################
let g:nerdtree_tabs_meaningful_tab_names=0
let g:nerdtree_tabs_open_on_console_startup=0
nmap <silent> <C-E> :NERDTreeFocusToggle<CR>
nmap <silent> <F3> :NERDTreeTabsToggle<CR>
let NERDTreeMapActivateNode='l'
let NERDTreeMapCloseDir='h'
let NERDTreeShowBookmarks = 1

"##############################################################################
"CTRLP Bundle
"##############################################################################
let g:ctrlp_show_hidden = 1
let g:ctrlp_map = '<C-P>'
let g:ctrlp_cmd = 'CtrlP'
set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe  " Windows
nmap <C-P> :CtrlP<CR>
"open files in tab automatically
let g:ctrlp_prompt_mappings = {
  \ 'AcceptSelection("e")': [],
  \ 'AcceptSelection("t")': ['<cr>', '<c-m>'],
  \ }

"##############################################################################
"Syntastic Syntax checker
"##############################################################################
let g:syntastic_c_check_header = 1
let g:syntastic_c_auto_refresh_includes = 1

"##############################################################################
"Neocomplcache keyword completion system
"##############################################################################
let g:acp_enableAtStartup = 0
let g:neocomplcache_enable_at_startup = 1
let g:neocomplcache_enable_smart_case = 1
let g:neocomplcache_min_syntax_length = 1

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplcache#undo_completion()
inoremap <expr><C-l>     neocomplcache#complete_common_string()

" Recommended key-mappings.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return neocomplcache#smart_close_popup() . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? neocomplcache#close_popup() : "\<CR>"
endfunction

inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplcache#close_popup()
inoremap <expr><C-e>  neocomplcache#cancel_popup()

"keymappings for neosnippets
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: "\<TAB>"

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif

if !exists('g:neocomplcache_omni_patterns')
let g:neocomplcache_omni_patterns = {}
endif
let g:neocomplcache_omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
let g:neocomplcache_omni_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
let g:neocomplcache_omni_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'




"##############################################################################
" Easymotion
"##############################################################################
let g:EasyMotion_smartcase = 1
nmap f <Plug>(easymotion-w)
nmap s <Plug>(easymotion-s)
nmap <S-F> <Plug>(easymotion-bd-w)
"##############################################################################
" Misc
"##############################################################################
function! Close_tab_nerdtree()
        exec 'NERDTreeClose'
        exec 'tabclose'
endfunction
nmap <S-Q> :call Close_tab_nerdtree()<CR>


"repeat commands on visual block
vnoremap . :normal .<CR>
