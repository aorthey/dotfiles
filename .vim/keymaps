"##############################################################################
" Key remappings
"##############################################################################

"##############################################################################
"NERDTree keymaps
"##############################################################################
let g:nerdtree_tabs_meaningful_tab_names=0
let g:ierdtree_tabs_open_on_console_startup=0
nmap <silent> <C-E> :NERDTreeFocusToggle<CR>

let NERDTreeMapActivateNode='l'
let NERDTreeMapCloseDir='h'
let NERDTreeShowBookmarks = 1

let NERDTreeIgnore = ['\.pyc$','\.aux$','\.out$','\.pdf$','\.log$']

"##############################################################################
"CTRLP Bundle
"##############################################################################
let g:ctrlp_show_hidden = 1
let g:ctrlp_map = '<C-P>'
let g:ctrlp_cmd = 'CtrlP'
set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe  " Windows
nmap <C-P> :CtrlP<CR>
"open files in tab automatically
let g:ctrlp_prompt_mappings = {
  \ 'AcceptSelection("e")': [],
  \ 'AcceptSelection("t")': ['<cr>', '<c-m>'],
  \ }

"##############################################################################
"Syntastic Syntax checker
"##############################################################################
let g:syntastic_c_check_header = 1
let g:syntastic_c_auto_refresh_includes = 1

"##############################################################################
"Neocomplcache keyword completion system
"##############################################################################
let g:acp_enableAtStartup = 0
let g:neocomplcache_enable_at_startup = 1
let g:neocomplcache_enable_smart_case = 1
let g:neocomplcache_min_syntax_length = 1

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplcache#undo_completion()
inoremap <expr><C-l>     neocomplcache#complete_common_string()

" Recommended key-mappings.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return neocomplcache#smart_close_popup() . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? neocomplcache#close_popup() : "\<CR>"
endfunction

inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplcache#close_popup()
inoremap <expr><C-e>  neocomplcache#cancel_popup()

"keymappings for neosnippets
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: "\<TAB>"

let g:neosnippet#snippets_directory='~/.vim/bundle/vim-snippets-additional'

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif

if !exists('g:neocomplcache_omni_patterns')
let g:neocomplcache_omni_patterns = {}
endif
let g:neocomplcache_omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
let g:neocomplcache_omni_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
let g:neocomplcache_omni_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

"##############################################################################
" Easymotion
"##############################################################################
let g:EasyMotion_smartcase = 1
nmap f <Plug>(easymotion-w)
nmap s <Plug>(easymotion-s2)
nmap t <Plug>(easymotion-t2)
map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)
map  n <Plug>(easymotion-next)
map  N <Plug>(easymotion-prev)
nmap <S-F> <Plug>(easymotion-bd-w)

"##############################################################################
" Trinity
"##############################################################################

""""Open and close all the three plugins on the same time
"""nmap <F8>   :TrinityToggleAll<CR>
""""Open and close the srcexpl.vim separately
"""nmap <F9>   :TrinityToggleSourceExplorer<CR>
""""Open and close the taglist.vim separately
"""nmap <F10>  :TrinityToggleTagList<CR>
""""Open and close the NERD_tree.vim separately
"""nmap <F11>  :TrinityToggleNERDTree<CR> 

"##############################################################################
" Misc
"##############################################################################
function! Close_tab_nerdtree()
        exec 'NERDTreeClose'
        exec 'tabclose'
endfunction
nmap <S-Q> :call Close_tab_nerdtree()<CR>


"repeat commands on visual block
vnoremap . :normal .<CR>

nmap <C-J> <C-W>j
nmap <C-K> <C-W>k<C-W>l

nmap <silent> <F3> :SrcExplToggle<CR><C-W>l

" // Set the height of Source Explorer window 
let g:SrcExpl_winHeight = 9 
let g:SrcExpl_refreshTime = 100 
" // Set "Enter" key to jump into the exact definition context 
let g:SrcExpl_jumpKey = "<ENTER>" 
" // Set "Space" key for back from the definition context 
let g:SrcExpl_gobackKey = "<SPACE>" 

" // In order to avoid conflicts, the Source Explorer should know what plugins
" // except itself are using buffers. And you need add their buffer names into
" // below listaccording to the command ":buffers!"
let g:SrcExpl_pluginList = [ 
        \ "__Tag_List__", 
        \ "_NERD_tree_" 
    \ ] 

" // Enable/Disable the local definition searching, and note that this is not 
" // guaranteed to work, the Source Explorer doesn't check the syntax for now. 
" // It only searches for a match with the keyword according to command 'gd' 
let g:SrcExpl_searchLocalDef = 1 

" // Do not let the Source Explorer update the tags file when opening 
let g:SrcExpl_isUpdateTags = 0 

" // Use 'Exuberant Ctags' with '--sort=foldcase -R .' or '-L cscope.files' to 
" // create/update the tags file 
let g:SrcExpl_updateTagsCmd = "ctags --sort=foldcase -R ." 

" // Set "<F12>" key for updating the tags file artificially 
let g:SrcExpl_updateTagsKey = "<F12>" 

" // Set "<F3>" key for displaying the previous definition in the jump list 
let g:SrcExpl_prevDefKey = "<F5>" 
let g:SrcExpl_nextDefKey = "<F6>" 

